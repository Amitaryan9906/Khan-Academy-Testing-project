"use strict";
/**
 * Functions for running `mike`
 *
 * @module
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deploy = void 0;
const lodash_1 = __importDefault(require("lodash"));
const node_path_1 = __importDefault(require("node:path"));
const teen_process_1 = require("teen_process");
const constants_1 = require("../constants");
const error_1 = require("../error");
const fs_1 = require("../fs");
const logger_1 = require("../logger");
const util_1 = require("../util");
const log = (0, logger_1.getLogger)('builder:deploy');
/**
 * Runs `mike serve`
 * @param pythonPath Path to Python 3 executable
 * @param args Extra args to `mike build`
 * @param opts Extra options for `teen_process.Subprocess.start`
 */
async function doServe(pythonPath, args = [], opts = {}) {
    const finalArgs = ['-m,', constants_1.NAME_MIKE, 'serve', ...args];
    return (0, util_1.spawnBackgroundProcess)(pythonPath, finalArgs, opts);
}
/**
 * Runs `mike build`
 * @param pythonPath Path to Python 3 executable
 * @param args Extra args to `mike build`
 * @param opts Extra options to `teen_process.exec`
 */
async function doDeploy(pythonPath, args = [], opts = {}) {
    const finalArgs = ['-m', constants_1.NAME_MIKE, 'deploy', ...args];
    log.debug('Executing %s via: %s %O', constants_1.NAME_MIKE, pythonPath, finalArgs);
    return await (0, teen_process_1.exec)(pythonPath, finalArgs, opts);
}
/**
 * Derives a deployment version from `package.json`
 * @param packageJsonPath Path to `package.json` if known
 * @param cwd Current working directory
 */
async function findDeployVersion(packageJsonPath, cwd = process.cwd()) {
    const { pkg } = await (0, fs_1.readPackageJson)(packageJsonPath ? node_path_1.default.dirname(packageJsonPath) : cwd, true);
    const version = pkg.version;
    if (!version) {
        throw new error_1.DocutilsError('No "version" field found in package.json; please add one or specify a version to deploy');
    }
    return version;
}
/**
 * Runs `mike build` or `mike serve`
 * @param opts Options
 */
async function deploy({ mkdocsYml: mkDocsYmlPath, packageJson: packageJsonPath, deployVersion: version, cwd = process.cwd(), serve = false, push = false, branch = constants_1.DEFAULT_DEPLOY_BRANCH, remote = constants_1.DEFAULT_DEPLOY_REMOTE, prefix, message, alias, rebase = true, port = constants_1.DEFAULT_SERVE_PORT, host = constants_1.DEFAULT_SERVE_HOST, serveOpts, execOpts, } = {}) {
    const stop = (0, util_1.stopwatch)('deploy');
    const pythonPath = await (0, fs_1.findPython)();
    if (!pythonPath) {
        throw new error_1.DocutilsError(`Could not find ${constants_1.NAME_PYTHON}3/${constants_1.NAME_PYTHON} executable in PATH; please install Python v3`);
    }
    mkDocsYmlPath = mkDocsYmlPath ?? (await (0, fs_1.findMkDocsYml)(cwd));
    if (!mkDocsYmlPath) {
        throw new error_1.DocutilsError(`Could not find ${constants_1.NAME_MKDOCS_YML} from ${cwd}; run "${constants_1.NAME_BIN} init" to create it`);
    }
    version = version ?? (await findDeployVersion(packageJsonPath, cwd));
    // substitute %s in message with version
    message = message?.replace('%s', version);
    const mikeOpts = {
        'config-file': mkDocsYmlPath,
        push,
        remote,
        branch,
        prefix,
        message,
        rebase,
        port,
        host,
    };
    if (serve) {
        const mikeArgs = [
            ...(0, util_1.argify)(lodash_1.default.pickBy(mikeOpts, (value) => lodash_1.default.isNumber(value) || Boolean(value))),
            version,
        ];
        if (alias) {
            mikeArgs.push(alias);
        }
        stop(); // discard
        // unsure about how SIGHUP is handled here
        await doServe(pythonPath, mikeArgs, serveOpts);
    }
    else {
        log.info('Deploying into branch %s', branch);
        const mikeArgs = [
            ...(0, util_1.argify)(lodash_1.default.omitBy(mikeOpts, (value, key) => lodash_1.default.includes(['port', 'host'], key) || (!lodash_1.default.isNumber(value) && !value))),
            version,
        ];
        if (alias) {
            mikeArgs.push(alias);
        }
        await doDeploy(pythonPath, mikeArgs, execOpts);
        log.success('Finished deployment into branch %s (%dms)', branch, stop());
    }
}
exports.deploy = deploy;
//# sourceMappingURL=deploy.js.map