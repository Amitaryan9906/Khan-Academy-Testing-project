"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.parseWindowProperties = parseWindowProperties;
exports.parseWindows = parseWindows;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _utils = require("../utils");
var _driver = require("appium/driver");
const WINDOW_TITLE_PATTERN = /^\s+Window\s#\d+\sWindow\{[0-9a-f]+\s\w+\s([\w-]+)\}:$/;
const FRAME_PATTERN = /\bm?[Ff]rame=\[([0-9.-]+),([0-9.-]+)\]\[([0-9.-]+),([0-9.-]+)\]/;
const VIEW_VISIBILITY_PATTERN = /\bmViewVisibility=(0x[0-9a-fA-F]+)/;
const VIEW_VISIBLE = 0x0;
const STATUS_BAR_WINDOW_NAME_PREFIX = 'StatusBar';
const NAVIGATION_BAR_WINDOW_NAME_PREFIX = 'NavigationBar';
const DEFAULT_WINDOW_PROPERTIES = {
  visible: false,
  x: 0,
  y: 0,
  width: 0,
  height: 0
};
const commands = {};
function parseWindowProperties(name, props, log = null) {
  const result = _lodash.default.cloneDeep(DEFAULT_WINDOW_PROPERTIES);
  const propLines = props.join('\n');
  const frameMatch = FRAME_PATTERN.exec(propLines);
  if (!frameMatch) {
    log === null || log === void 0 ? void 0 : log.debug(propLines);
    throw new Error(`Cannot parse the frame size from '${name}' window properties`);
  }
  result.x = parseFloat(frameMatch[1]);
  result.y = parseFloat(frameMatch[2]);
  result.width = parseFloat(frameMatch[3]) - result.x;
  result.height = parseFloat(frameMatch[4]) - result.y;
  const visibilityMatch = VIEW_VISIBILITY_PATTERN.exec(propLines);
  if (!visibilityMatch) {
    log === null || log === void 0 ? void 0 : log.debug(propLines);
    throw new Error(`Cannot parse the visibility value from '${name}' window properties`);
  }
  result.visible = parseInt(visibilityMatch[1], 16) === VIEW_VISIBLE;
  return result;
}
function parseWindows(lines, log = null) {
  const windows = {};
  let currentWindowName = null;
  for (const line of lines.split('\n').map(_lodash.default.trimEnd)) {
    const match = WINDOW_TITLE_PATTERN.exec(line);
    if (match) {
      currentWindowName = match[1];
      windows[currentWindowName] = [];
      continue;
    }
    if (_lodash.default.trim(line).length === 0) {
      currentWindowName = null;
      continue;
    }
    if (currentWindowName && _lodash.default.isArray(windows[currentWindowName])) {
      windows[currentWindowName].push(line);
    }
  }
  if (_lodash.default.isEmpty(windows)) {
    log === null || log === void 0 ? void 0 : log.debug(lines.join('\n'));
    throw new Error('Cannot parse any window information from the dumpsys output');
  }
  const result = {
    statusBar: null,
    navigationBar: null
  };
  for (const [name, props] of _lodash.default.toPairs(windows)) {
    if (name.startsWith(STATUS_BAR_WINDOW_NAME_PREFIX)) {
      result.statusBar = parseWindowProperties(name, props, log);
    } else if (name.startsWith(NAVIGATION_BAR_WINDOW_NAME_PREFIX)) {
      result.navigationBar = parseWindowProperties(name, props, log);
    }
  }
  const unmatchedWindows = [['statusBar', STATUS_BAR_WINDOW_NAME_PREFIX], ['navigationBar', NAVIGATION_BAR_WINDOW_NAME_PREFIX]].filter(([name]) => _lodash.default.isNil(result[name]));
  for (const [window, namePrefix] of unmatchedWindows) {
    log === null || log === void 0 ? void 0 : log.info(`No windows have been found whose title matches to ` + `'${namePrefix}'. Assuming it is invisible. ` + `Only the following windows are available: ${_lodash.default.keys(windows)}`);
    result[window] = _lodash.default.cloneDeep(DEFAULT_WINDOW_PROPERTIES);
  }
  return result;
}
commands.getSystemBars = async function getSystemBars() {
  let stdout;
  try {
    stdout = await this.adb.shell(['dumpsys', 'window', 'windows']);
  } catch (e) {
    throw new Error(`Cannot retrieve system bars details. Original error: ${e.message}`);
  }
  return parseWindows(stdout, this.log);
};
commands.mobilePerformStatusBarCommand = async function mobilePerformStatusBarCommand(opts = {}) {
  const {
    command
  } = (0, _utils.requireArgs)('command', opts);
  const toStatusBarCommandCallable = (cmd, argsCallable = null) => async () => await this.adb.shell(['cmd', 'statusbar', cmd, ...(argsCallable ? argsCallable() : [])]);
  const tileCommandArgsCallable = () => (0, _utils.requireArgs)('component', opts).component;
  const statusBarCommands = _lodash.default.fromPairs([['expandNotifications', ['expand-notifications']], ['expandSettings', ['expand-settings']], ['collapse', ['collapse']], ['addTile', ['add-tile', tileCommandArgsCallable]], ['removeTile', ['remove-tile', tileCommandArgsCallable]], ['clickTile', ['click-tile', tileCommandArgsCallable]], ['getStatusIcons', ['get-status-icons']]].map(([name, args]) => [name, toStatusBarCommandCallable(...args)]));
  const action = statusBarCommands[command];
  if (!action) {
    throw new _driver.errors.InvalidArgumentError(`The '${command}' status bar command is unknown. Only the following commands ` + `are supported: ${_lodash.default.keys(statusBarCommands)}`);
  }
  return await action();
};
var _default = commands;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,